Pointcut
官网地址:https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#aop-pointcuts-examples

execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)
                throws-pattern?)
             修饰符 返回值类型 包名类名 方法参数 异常

The execution of any public method:
    execution(public * *(..))

The execution of any method with a name that begins with set:
    execution(* set*(..))

The execution of any method defined by the AccountService interface:
    execution(* com.xyz.service.AccountService.*(..))

The execution of any method defined in the service package:
====================在service包里的任意方法====================
    execution(* com.xyz.service.*.*(..))

The execution of any method defined in the service package or one of its sub-packages:
====================在service包或是子包里的任意方法====================
    execution(* com.xyz.service..*.*(..))

Any join point (method execution only in Spring AOP) within the service package:
    within(com.xyz.service.*)

Any join point (method execution only in Spring AOP) within the service package or one of its sub-packages:
    within(com.xyz.service..*)

Any join point (method execution only in Spring AOP) where the proxy implements the AccountService interface:
    this(com.xyz.service.AccountService)

'this' is more commonly used in a binding form. See the section on Declaring Advice for how to make the proxy object available in the advice body.

Any join point (method execution only in Spring AOP) where the target object implements the AccountService interface:
    target(com.xyz.service.AccountService)

'target' is more commonly used in a binding form. See the Declaring Advice section for how to make the target object available in the advice body.
Any join point (method execution only in Spring AOP) that takes a single parameter and where the argument passed at runtime is Serializable:

    args(java.io.Serializable)
'args' is more commonly used in a binding form. See the Declaring Advice section for how to make the method arguments available in the advice body.
Note that the pointcut given in this example is different from execution(* *(java.io.Serializable)). The args version matches if the argument passed at runtime is Serializable, and the execution version matches if the method signature declares a single parameter of type Serializable.

Any join point (method execution only in Spring AOP) where the target object has a @Transactional annotation:

    @target(org.springframework.transaction.annotation.Transactional)
You can also use '@target' in a binding form. See the Declaring Advice section for how to make the annotation object available in the advice body.
Any join point (method execution only in Spring AOP) where the declared type of the target object has an @Transactional annotation:

    @within(org.springframework.transaction.annotation.Transactional)
You can also use '@within' in a binding form. See the Declaring Advice section for how to make the annotation object available in the advice body.
Any join point (method execution only in Spring AOP) where the executing method has an @Transactional annotation:
    @annotation(org.springframework.transaction.annotation.Transactional)

You can also use '@annotation' in a binding form. See the Declaring Advice section for how to make the annotation object available in the advice body.
Any join point (method execution only in Spring AOP) which takes a single parameter, and where the runtime type of the argument passed has the @Classified annotation:

    @args(com.xyz.security.Classified)
You can also use '@args' in a binding form. See the Declaring Advice section how to make the annotation object(s) available in the advice body.
Any join point (method execution only in Spring AOP) on a Spring bean named tradeService:
    bean(tradeService)

Any join point (method execution only in Spring AOP) on Spring beans having names that match the wildcard expression *Service:
    bean(*Service)