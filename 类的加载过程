9.1 类的加载过程简介
    加载阶段 查找并加载类的二进制数据文件（class文件）
    连接阶段
        验证
            验证文件文件格式
                主次版号
                构成class文件的字节流是否残缺或是其他信息（主要是MD5指纹）
                常量池中的常量是否存在不被支持的变量类型（比如int64）
                指向常量中的引用是否指到了不存在的常量或是该常量不支持的类型
                其他信息
            元数据验证
                检查这个类是否存在父类、是否继承某个接口、父类和接口是否合法或者是否真实存在
                检查该类是否继承了被final修饰的类，被final修饰的类是不允许被继承并且其中的方法是不允许被override的
                检查该类是否为抽象类，若是不是抽象类，那么他是否实现了父类的抽象方法或是接口中的所有方法
                检查方法重载的合法性。比如相同的方法名称，相同的参数但是返回类型不同，这些都是不允许的。
            字节码验证
                保证当前线程在程序计数器中的指令不会跳转到不合法的字节码指令中去
                保证类的转型是合法的
                保证任意时刻，虚拟机栈中的操作类与指令代码都能正确的被执行。
            符号验证（符号引用的验证目的是为了保证解析动作的顺利执行）
                通过符号引用描述的字符串全限定名称是否能够顺利的找到相关的类
                符号引用中的类、字段、方法是否对当前类可见（比如不能访问引用类的私有方法）
                其他
        准备
        解析
    初始化 为类的静态变量赋予正确的初始值（代码编写阶段给定的值）

9.2 类的主动使用和被动使用
    主动使用
        1、使用关键字new
        2、访问类的静态变量（包括读取、更新会导致类的初始化）
        3、访问类的静态方法（导致类的初始化）
        4、对类进行反射操作（导致类的初始化）
        5、初始化子类会导致父类的初始化
        6、执行main函数所在的类导致该类初始化

    被动使用
        构造某个类的数组
