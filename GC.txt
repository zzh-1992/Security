垃圾收集器与内存分配策略

3.1 垃圾收集器关注的是java堆区和方法区的内存。

3.2 判断对象生命状态
    3.2.1 引用计数法
        在对象中添加一个引用计数器，每当有一个地方引用，计数器值加1；当引用失效时，计数器减1；
        任何时刻计算器为0的对象就是不能再被使用的的。

    3.2.2 可达性分析算法
        通过一系列的称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，
        搜索过程所走过的路程称为“引用链”（Reference Chain），若某个对象到GC Roots间没有任何
        引用链相连，则证明该对象将会判定为可回收对象。

    3.2.3 引用
        强引用 只要强引用关系还在，垃圾收集器就永远不会回收被引用的对象 类型Object obj = new Object();
        软引用 有用但非必须的对象。只要被软引用关联的对象，在系统将要发生内存溢出异常前，会把这些对象列入回收范围之中进行第二次回收。
              若是这次回收还没有足够的内存，才会抛出内存溢出异常。JDK1.2之后提供了SoftReference类实现软引用。
        弱引用 非必须对象。被弱引用关联的对象只能生存到下一次垃圾啊收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，
              都会回收掉只被弱引用关联的对象。JDK1.2之后提供WeakReference类来实现弱引用。
        虚引用 为一个对象设置虚引用关联的唯一目的是只为了能在这个对象被收集器回收的时候收到一个系统通知。
              JDK1.2之后提供PhantomReference类来实现虚引用。
